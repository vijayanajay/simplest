# Epic 3: GA Strategy Optimizer

**Goal:** Implement the core Genetic Algorithm engine (`StrategyOptimizer`) to discover and evolve strategies, incorporating multi-stock fitness evaluation, MVP heuristic tagging, and basic state management. This supports the PRD goals of automating discovery, identifying strategies that generalize, and providing interpretable strategies (via heuristics/tags).

## Story List

### Story 3.1: GA Core & Population Management

- **User Story / Goal:** As the system, I need a functional Genetic Algorithm core that can generate an initial population of strategies and evolve them through selection, crossover, and mutation so that potentially profitable strategies can be discovered and refined automatically.
- **Detailed Requirements:**
  - Implement the `StrategyOptimizer` component, housing the GA logic.
  - Implement generation of an initial population of strategies based on the defined strategy rule format and available features/parameters (using predefined common parameter values/tight ranges for MVP).
  - Implement GA operators: selection (e.g., tournament selection), crossover, and mutation.
  - Ensure GA operators respect the standardized strategy rule format and parameter constraints (predefined values/ranges).
  - Manage the population of strategies across generations.
  - Integrate with the `StrategyBacktester` to evaluate the fitness of strategies.
  - Allow seeding the GA from simple user-defined templates (if configured).
- **Acceptance Criteria (ACs):**
  - AC1: The `StrategyOptimizer` can generate an initial population of valid strategies.
  - AC2: The GA implements selection, crossover, and mutation operators.
  - AC3: GA operators produce valid strategies according to the rule format and parameter constraints.
  - AC4: The optimizer can run for a configured number of generations, applying GA operators and evaluating fitness.
  - AC5: The optimizer can optionally seed the initial population or guide early generations using simple rule templates from the configuration.
- **Tasks (Optional Initial Breakdown):**
  - [ ] Implement initial population generation.
  - [ ] Implement selection mechanism.
  - [ ] Implement crossover operator.
  - [ ] Implement mutation operator.
  - [ ] Integrate backtester for fitness evaluation.
  - [ ] Add template seeding logic.

---

### Story 3.2: Multi-Stock Fitness Evaluation

- **User Story / Goal:** As the system, I need to evaluate strategy fitness based on performance across multiple diverse stocks, not just one, so that the GA is pressured to find strategies that generalize well and avoid overfitting to a single instrument.
- **Detailed Requirements:**
  - Design and implement the GA fitness function.
  - The fitness function must primarily incorporate strategy performance metrics (e.g., Net Profit, Sharpe Ratio) aggregated across multiple (e.g., 2-3 configurable) diverse stocks.
  - The fitness function must heavily penalize strategies that perform well on only one stock ("single-stock wonders").
  - Implement a "Selective Multi-Stock Evaluation" heuristic: For early GA generations or less promising strategies, evaluate on a smaller subset of target stocks, promoting to full multi-stock evaluation only for fitter candidates to save computation. This heuristic should be configurable.
  - Ensure the fitness function incorporates penalties from heuristic tagging (see Story 3.3).
- **Acceptance Criteria (ACs):**
  - AC1: The fitness function calculates a score based on performance metrics aggregated across multiple stocks.
  - AC2: The fitness function includes a mechanism to penalize strategies that are only profitable on a single stock.
  - AC3: The "Selective Multi-Stock Evaluation" heuristic is implemented and configurable.
  - AC4: Strategies evaluated on a subset of stocks receive a preliminary fitness score that guides whether they are promoted for full evaluation.
  - AC5: The fitness function incorporates penalties applied by the heuristic tagging system.
- **Tasks (Optional Initial Breakdown):**
  - [ ] Design multi-stock aggregation logic for fitness.
  - [ ] Implement single-stock wonder penalty.
  - [ ] Implement selective evaluation heuristic logic.
  - [ ] Integrate heuristic penalty application into fitness.

---

### Story 3.3: MVP Heuristic Tagging & Penalties

- **User Story / Goal:** As the system, I need to identify and tag strategies exhibiting common failure modes (like whipsaw or poor generalization) and heavily penalize their fitness so that the GA is guided away from ineffective strategy structures.
- **Detailed Requirements:**
  - Implement the core heuristic tagging mechanism within the `StrategyOptimizer`.
  - Implement heuristics to identify and tag the MVP failure modes specified in the PRD Phase 1: `Whipsaw`, `LateEntry`, `Bad Exit`, `Low Generality`, `Overfitting`, `GloballyPoorPerformer`.
  - Define clear, objective criteria for applying each tag based on backtest results and strategy structure.
  - Implement a system to apply significant fitness penalties to strategies based on the tags they receive.
  - Ensure heuristic logic is modular and testable.
  - **For MVP, focus on a smaller, highly impactful set of heuristic tags with clear, predictable effects on the fitness function. Avoid complex interactions between many tags initially.**
- **Acceptance Criteria (ACs):**
  - AC1: The system can apply heuristic tags (`Whipsaw`, `LateEntry`, `Bad Exit`, `Low Generality`, `Overfitting`, `GloballyPoorPerformer`) to strategies based on backtest results.
  - AC2: The criteria for applying each MVP tag are clearly defined and implemented.
  - AC3: Strategies receiving tags have their fitness score significantly reduced.
  - AC4: The heuristic tagging logic is implemented in a modular way.
  - AC5: The system correctly identifies strategies as `GloballyPoorPerformer` if they fail badly on >N configurable distinct stocks.
- **Tasks (Optional Initial Breakdown):**
  - [ ] Define criteria for each MVP heuristic tag.
  - [ ] Implement heuristic functions for each tag.
  - [ ] Implement tag application logic.
  - [ ] Implement fitness penalty application based on tags.

---

### Story 3.4: GA State Management & Logging

- **User Story / Goal:** As a user, I want the GA run to be robust against interruptions and provide insight into its progress so that I don't lose long-running jobs and can monitor the optimization process.
- **Detailed Requirements:**
  - Implement robust checkpointing for the GA state (population, fitness, tags, random seeds, configuration).
  - Checkpoints should be saved periodically (e.g., every N generations or M minutes).
  - Support resuming a GA run from the latest checkpoint.
  - Log key GA evolution metrics (best/average fitness, diversity, tag counts per generation) to a separate, parsable file (CSV/JSON lines).
  - Provide clear console logging for GA progress (e.g., "Generation X/Y: Best Fitness Z.ZZ, Avg Fitness A.AA, Tags: Whipsaw=N").
  - **For long runs, consider having `StrategyOptimizer` periodically save a simple plot (e.g., best/average fitness vs. generation) as an image file for quick visual check on GA convergence.**
  - Implement a lightweight "Strategy Performance Memory" for the current run: Maintain memory of strategy variants (core rule structure) and their performance/tags per stock. If a variant is tagged `GloballyPoorPerformer` (e.g., fails badly on >N stocks), its fitness is significantly reduced, or it's temporarily deprioritized for selection/mutation in its current form for a configurable number of generations.
- **Acceptance Criteria (ACs):**
  - AC1: The GA state is periodically saved to a checkpoint file.
  - AC2: A GA run can be resumed from a checkpoint file, continuing from the saved state.
  - AC3: Key GA evolution metrics (fitness, diversity, tag counts) are logged per generation to a separate file.
  - AC4: Console output provides clear, concise progress updates for the GA run.
  - AC5: The system can optionally save a plot of fitness vs. generation periodically.
  - AC6: The lightweight Strategy Performance Memory tracks strategy variants and their per-stock performance/tags within a run.
  - AC7: Strategies tagged `GloballyPoorPerformer` have their fitness significantly reduced or are deprioritized for selection/mutation within the current run.
- **Tasks (Optional Initial Breakdown):**
  - [ ] Design checkpointing format/mechanism.
  - [ ] Implement checkpoint saving.
  - [ ] Implement run resuming logic.
  - [ ] Implement GA metric logging.
  - [ ] Add console progress reporting.
  - [ ] Implement optional fitness plot saving.
  - [ ] Implement lightweight strategy memory.
  - [ ] Implement deprioritization/penalty for globally poor performers.

---

## Change Log

| Change        | Date       | Version | Description                    | Author         |
| ------------- | ---------- | ------- | ------------------------------ | -------------- |
| Initial Draft | 2023-10-27 | 0.1     | Created Epic 3 based on PRD MVP | PM Agent       | 